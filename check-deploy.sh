#!/bin/bash

# üöÄ Script de Verifica√ß√£o Pr√©-Deploy
# Este script verifica se tudo est√° pronto para o deploy

echo "üîç Verificando portfolio para deploy..."
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contador de erros
ERRORS=0

# Fun√ß√£o para verificar arquivos
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úì${NC} $1 encontrado"
    else
        echo -e "${RED}‚úó${NC} $1 n√£o encontrado"
        ((ERRORS++))
    fi
}

# Fun√ß√£o para verificar diret√≥rios
check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úì${NC} Diret√≥rio $1 encontrado"
    else
        echo -e "${RED}‚úó${NC} Diret√≥rio $1 n√£o encontrado"
        ((ERRORS++))
    fi
}

echo -e "${BLUE}üìÅ Verificando estrutura de arquivos...${NC}"
echo "-----------------------------------"

# Arquivos principais
check_file "index.html"
check_file "manifest.json"
check_file "sw.js"
check_file "package.json"
check_file "tailwind.config.js"
check_file "netlify.toml"
check_file "README.md"
check_file "DEPLOY.md"

# Diret√≥rios
check_dir "assets"
check_dir "fonts"
check_dir "src"

# Assets espec√≠ficos
echo ""
echo -e "${BLUE}üé® Verificando assets...${NC}"
echo "------------------------"
check_file "assets/tailwind.css"
check_file "assets/style.css"
check_dir "assets/icons"

# Verificar se CSS foi buildado
if [ -f "assets/tailwind.css" ]; then
    SIZE=$(stat -c%s "assets/tailwind.css")
    if [ $SIZE -gt 1000 ]; then
        echo -e "${GREEN}‚úì${NC} Tailwind CSS buildado (${SIZE} bytes)"
    else
        echo -e "${YELLOW}‚ö†${NC} Tailwind CSS muito pequeno, execute 'npm run build'"
        ((ERRORS++))
    fi
fi

# Verificar package.json
echo ""
echo -e "${BLUE}üì¶ Verificando package.json...${NC}"
echo "-----------------------------"
if [ -f "package.json" ]; then
    if grep -q "tailwindcss" package.json; then
        echo -e "${GREEN}‚úì${NC} Tailwind CSS configurado"
    else
        echo -e "${RED}‚úó${NC} Tailwind CSS n√£o encontrado em package.json"
        ((ERRORS++))
    fi
    
    if grep -q "build" package.json; then
        echo -e "${GREEN}‚úì${NC} Script de build configurado"
    else
        echo -e "${RED}‚úó${NC} Script de build n√£o encontrado"
        ((ERRORS++))
    fi
fi

# Verificar HTML
echo ""
echo -e "${BLUE}üìÑ Verificando index.html...${NC}"
echo "----------------------------"
if [ -f "index.html" ]; then
    # Meta tags essenciais
    if grep -q "viewport" index.html; then
        echo -e "${GREEN}‚úì${NC} Meta viewport configurado"
    else
        echo -e "${RED}‚úó${NC} Meta viewport n√£o encontrado"
        ((ERRORS++))
    fi
    
    # Open Graph
    if grep -q "og:title" index.html; then
        echo -e "${GREEN}‚úì${NC} Open Graph configurado"
    else
        echo -e "${YELLOW}‚ö†${NC} Open Graph n√£o encontrado"
    fi
    
    # PWA
    if grep -q "manifest.json" index.html; then
        echo -e "${GREEN}‚úì${NC} Manifest PWA linkado"
    else
        echo -e "${RED}‚úó${NC} Manifest PWA n√£o linkado"
        ((ERRORS++))
    fi
    
    # Netlify Forms
    if grep -q "data-netlify" index.html; then
        echo -e "${GREEN}‚úì${NC} Formul√°rio Netlify configurado"
    else
        echo -e "${RED}‚úó${NC} Formul√°rio Netlify n√£o configurado"
        ((ERRORS++))
    fi
    
    # Google Analytics
    if grep -q "gtag" index.html; then
        echo -e "${GREEN}‚úì${NC} Google Analytics encontrado"
        if grep -q "GA_MEASUREMENT_ID" index.html; then
            echo -e "${YELLOW}‚ö†${NC} Lembre-se de substituir GA_MEASUREMENT_ID pelo ID real"
        fi
    else
        echo -e "${YELLOW}‚ö†${NC} Google Analytics n√£o encontrado"
    fi
fi

# Verificar fontes
echo ""
echo -e "${BLUE}üî§ Verificando fontes...${NC}"
echo "----------------------"
FONT_COUNT=$(find fonts/ -name "*.ttf" -o -name "*.otf" 2>/dev/null | wc -l)
if [ $FONT_COUNT -gt 0 ]; then
    echo -e "${GREEN}‚úì${NC} $FONT_COUNT fontes encontradas"
else
    echo -e "${YELLOW}‚ö†${NC} Nenhuma fonte encontrada"
fi

# Verificar √≠cones
echo ""
echo -e "${BLUE}üéØ Verificando √≠cones...${NC}"
echo "------------------------"
if [ -d "assets/icons" ]; then
    ICON_COUNT=$(find assets/icons/ -name "*.svg" -o -name "*.png" -o -name "*.webp" 2>/dev/null | wc -l)
    if [ $ICON_COUNT -gt 0 ]; then
        echo -e "${GREEN}‚úì${NC} $ICON_COUNT √≠cones encontrados"
    else
        echo -e "${YELLOW}‚ö†${NC} Nenhum √≠cone encontrado"
    fi
fi

# Verificar node_modules
echo ""
echo -e "${BLUE}üìö Verificando depend√™ncias...${NC}"
echo "-----------------------------"
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úì${NC} node_modules presente"
    if [ -f "package-lock.json" ]; then
        echo -e "${GREEN}‚úì${NC} package-lock.json presente"
    fi
else
    echo -e "${YELLOW}‚ö†${NC} node_modules n√£o encontrado - execute 'npm install'"
fi

# Resultado final
echo ""
echo "=================================="
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ SUCESSO! Portfolio pronto para deploy${NC}"
    echo ""
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. Execute 'npm run build' se ainda n√£o executou"
    echo "2. Substitua GA_MEASUREMENT_ID pelo ID real do Google Analytics"
    echo "3. Fa√ßa commit e push para seu reposit√≥rio"
    echo "4. Configure deploy no Netlify"
    echo "5. Teste o formul√°rio de contato em produ√ß√£o"
    echo ""
    echo -e "${GREEN}üöÄ Bom deploy!${NC}"
else
    echo -e "${RED}‚ùå $ERRORS erro(s) encontrado(s)${NC}"
    echo "Corrija os problemas antes do deploy"
fi

exit $ERRORS
